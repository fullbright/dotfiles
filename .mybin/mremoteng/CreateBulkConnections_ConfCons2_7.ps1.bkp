#####################################
# Authors: David Sparer & Jack Denton
# Summary:
#   This is intended to be a template for creating connections in bulk. This uses the serializers directly from the mRemoteNG binaries.
#   You will still need to create the connection info objects, but the library will handle serialization. It is expected that you
#   are familiar with PowerShell. If this is not the case, reach out to the mRemoteNG community for help.
# Usage:
#   Replace or modify the examples that are shown toward the end of the script to create your own connection info objects.
#####################################

# Helper function to retrieve reusable credentials
function Get-ReusableCredential {
    if (-not $Global:ReusableCredential) {
        $Global:ReusableCredential = Get-Credential -Message "Enter credentials for mRemoteNG connections"
    }
    return $Global:ReusableCredential
}

function New-mRNGConnection {
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param (
        [Parameter(Mandatory)]
        [string]
        $Name,

        [Parameter(Mandatory)]
        [string]
        $Hostname,

        [Parameter(Mandatory)]
        [mRemoteNG.Connection.Protocol.ProtocolType]
        $Protocol,

        [Parameter(ParameterSetName = 'Credential')]
        [pscredential]
        $Credential,

        [Parameter(ParameterSetName = 'InheritCredential')]
        [switch]
        $InheritCredential,

        [Parameter()]
        [mRemoteNG.Container.ContainerInfo]
        $ParentContainer,

        [Parameter()]
        [switch]
        $PassThru,
		
		[Parameter()]
        [string]
        $Description,

        [Parameter()]
        [string]
        $PreConnectionScript,  # Pre-connection script

        [Parameter()]
        [string]
        $PostConnectionScript  # Post-connection script
    )

    $Connection = [mRemoteNG.Connection.ConnectionInfo]@{
        Name     = $Name
        Hostname = $Hostname
        Protocol = $Protocol
    }

    if ($Credential) {
        $Connection.Username = $Credential.GetNetworkCredential().UserName
        $Connection.Domain = $Credential.GetNetworkCredential().Domain
        $Connection.Password = $Credential.GetNetworkCredential().Password
    }

    if ($InheritCredential) {
        $Connection.Inheritance.Username = $true
        $Connection.Inheritance.Domain = $true
        $Connection.Inheritance.Password = $true
    }
	
    if ($Description) {
        $Connection.Description = $Description
    }

    # Set pre-connection and post-connection scripts
    if ($PreConnectionScript) {
        $Connection.PreExtApp = $PreConnectionScript
    }
    if ($PostConnectionScript) {
        $Connection.PostExtApp = $PostConnectionScript
    } 

    if ($ParentContainer) {
        $ParentContainer.AddChild($Connection)

        if ($PSBoundParameters.ContainsKey('PassThru')) {
            $Connection
        }
    } else {
        $Connection
    }
}


function ConvertTo-mRNGSerializedXml {
    [CmdletBinding()]
    Param (
        [Parameter(Mandatory)]
        [mRemoteNG.Connection.ConnectionInfo[]]
        $Xml
)

    function Get-ChildNodes {
        Param ($Xml)

        $Xml

        if ($Xml -is [mRemoteNG.Container.ContainerInfo] -and $Xml.HasChildren()) {
            foreach ($Node in $Xml.Children) {
				# Write-Host "Exporting node $Node"
                Get-ChildNodes -Xml $Node
            }
        } else {
				Write-Host "The container has no children or is not a container"
		}
    }

    $AllNodes = Get-ChildNodes -Xml $Xml
    if (
        $AllNodes.Password -or
        $AllNodes.RDGatewayPassword -or
        $AllNodes.VNCProxyPassword
    ) {
        $Password = Read-Host -Message 'If you have password protected your ConfCons.xml please enter the password here otherwise just press enter' -AsSecureString
    }
    else {
        $Password = [securestring]::new()
    }
    $CryptoProvider = [mRemoteNG.Security.SymmetricEncryption.AeadCryptographyProvider]::new()
    $SaveFilter = [mRemoteNG.Security.SaveFilter]::new()
    $ConnectionNodeSerializer = [mRemoteNG.Config.Serializers.Xml.XmlConnectionNodeSerializer26]::new($CryptoProvider, $Password, $SaveFilter)
    $XmlSerializer = [mRemoteNG.Config.Serializers.Xml.XmlConnectionsSerializer]::new($CryptoProvider, $ConnectionNodeSerializer)

    $RootNode = [mRemoteNG.Tree.Root.RootNodeInfo]::new('Connection')
    foreach ($Node in $Xml) {
		# Write-Host "Pushing each node into the xml tree : $Node"
        $RootNode.AddChild($Node)
    }
    $XmlSerializer.Serialize($RootNode)
}


function New-mRNGContainer {
    [CmdletBinding(DefaultParameterSetName = 'Credential')]
    Param (
        [Parameter(Mandatory)]
        [string]
        $Name,

        [Parameter(ParameterSetName = 'Credential')]
        [pscredential]
        $Credential,

        [Parameter(ParameterSetName = 'InheritCredential')]
        [switch]
        $InheritCredential,

        [Parameter()]
        [mRemoteNG.Container.ContainerInfo]
        $ParentContainer
    )

    $Container = [mRemoteNG.Container.ContainerInfo]@{
        Name = $Name
    }

    if ($Credential) {
        $Container.Username = $Credential.GetNetworkCredential().UserName
        $Container.Domain = $Credential.GetNetworkCredential().Domain
        $Container.Password = $Credential.GetNetworkCredential().Password
    }

    if ($InheritCredential) {
        $Container.Inheritance.Username = $true
        $Container.Inheritance.Domain = $true
        $Container.Inheritance.Password = $true
    }

    if ($ParentContainer) {
        $ParentContainer.AddChild($Container)
    }
    
    $Container
}

function Export-mRNGXml {
    [CmdletBinding()]
    param (
        [Parameter()]
        [string]
        $Path,

        [Parameter()]
        [string]
        $SerializedXml
    )

    $FilePathProvider = [mRemoteNG.Config.DataProviders.FileDataProvider]::new($Path)
    $filePathProvider.Save($SerializedXml)
}



# Example usage with reusable credentials and pre/post-connection scripts
$ReusableCredential = Get-ReusableCredential


foreach ($Path in 'HKLM:\SOFTWARE\WOW6432Node\mRemoteNG', 'HKLM:\SOFTWARE\mRemoteNG') {
    Try {
        $mRNGPath = (Get-ItemProperty -Path $Path -Name InstallDir -ErrorAction Stop).InstallDir
        break
    }
    Catch {
        continue
    }
}
if (!$mRNGPath) {
    Add-Type -AssemblyName System.Windows.Forms
    $FolderBrowser = [System.Windows.Forms.FolderBrowserDialog]@{
        Description         = 'Please select the folder which contains mRemoteNG.exe'
        ShowNewFolderButton = $false
    }
    
    $Response = $FolderBrowser.ShowDialog()
    
    if ($Response.value__ -eq 1) {
        $mRNGPath = $FolderBrowser.SelectedPath
    }
    elseif ($Response.value__ -eq 2) {
        Write-Warning 'A folder containing mRemoteNG.exe has not been selected'
        return
    }
}
$null = [System.Reflection.Assembly]::LoadFile((Join-Path -Path $mRNGPath -ChildPath "mRemoteNG.exe"))
Add-Type -Path (Join-Path -Path $mRNGPath -ChildPath "BouncyCastle.Crypto.dll")



$csvgdp = Import-Csv -Path '.\ec2_asset_data.csv' | ? autoscaled -like *NO* | ? longcode -like *gdp_* | ? environment -like *prd*
$Connections = foreach ($i in $csvgdp) {
    $serverhostname = if ($i.hostname -ne "") { $i.hostname } else { "unknown" }
    $localportnumber_prefix = if ($i.region -eq "ca-central-1") { "6" } else { "5" }
    $localportnumber = '{0}{1}' -f ($localportnumber_prefix, $serverhostname.Substring($serverhostname.Length - 4))
    $aws_profile = 'rios-{0}' -f ($i.environment)
	
    $Splat = @{
        Name              = '{0} - {1} - {2}' -f ($i.longcode, $i.name, $serverhostname)
        Hostname          = $serverhostname
        Protocol          = 'RDP'
        Credential        = $ReusableCredential
        Description       = '{0}@{1}@{2}@{3}' -f ($i.instanceid, $localportnumber, $aws_profile, $i.region)
        PreConnectionScript = "pre_script_for_$($i.name).ps1" # Example pre-script
        PostConnectionScript = "post_script_for_$($i.name).ps1" # Example post-script
    }
    New-mRNGConnection @Splat
}

# Serialize the connections
$SerializedXml = ConvertTo-mRNGSerializedXml -Xml $Connections

# Write the XML to a file ready to import into mRemoteNG
Write-Host "Writing file to $ENV:APPDATA\mRemoteNG\PowerShellGeneratedSerialized.xml"
Export-mRNGXml -Path "$ENV:APPDATA\mRemoteNG\PowerShellGeneratedSerialized.xml" -SerializedXml $SerializedXml
